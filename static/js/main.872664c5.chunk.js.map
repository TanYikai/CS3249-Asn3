{"version":3,"sources":["RadialDisplayView.js","RadialSliderView.js","ViewModel.js","Model.js","App.js","serviceWorker.js","index.js"],"names":["RadialDisplayView","this","props","viewboxCenter","radius","styles","Fragment","cx","cy","r","stroke","strokeWidth","fill","id","offset","stopColor","style","circle","stroke-width","d","x","y","xmlns","viewBox","width","height","Component","RadialSliderView","thumbRadFrmCtr","posX","posY","mouseDown","toRad","tickArray","tickAngle","Math","cos","sin","tickElement","React","createElement","key","join","rx","ry","transformOrigin","transform","push","onMouseDown","ellipse","isHot","currTemp","targetTemp","isCold","isOk","thermostatMachine","Machine","context","initial","states","off","on","target","cond","cooling","heating","ViewModel","service","interpret","onTransition","current","setState","handleOnChange","e","currentTemperature","value","handleModechange","handleMouseDown","document","addEventListener","handleMouseMove","handleUpdateTargetTemp","handleMouseUp","removeEventListener","PI","rect","ref","getBoundingClientRect","center","angle","restrictToRange","toDeg","atan2","clientY","top","clientX","left","targetTemperature","T_c","T_t","currentMode","mode","state","createRef","viewboxWidth","initialState","start","stop","dialColor","dial","WebkitUserSelect","MozUserSelect","msUserSelect","userSelect","display","marginLeft","marginRight","marginTop","marginBottom","WebkitTransition","transition","textAnchor","fontFamily","alignmentBaseline","fontSize","fontWeight","visibility","away","val","min","max","round","rad","deg","getStyles","send","type","onChange","href","App","className","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.872664c5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass RadialDisplayView extends Component {\r\n    \r\n    render() {\r\n        const {viewboxCenter, radius, styles} = this.props;\r\n    \r\n        return (\r\n            <React.Fragment>\r\n                <circle cx={viewboxCenter} cy={viewboxCenter} r={radius * 1.1} stroke=\"#efefef\" strokeWidth=\"9\" fill=\"#fefdf9\" />\r\n                <defs>\r\n                    <linearGradient id=\"gradient\">\r\n                        <stop offset=\"0%\" stopColor=\"#289beb\" />\r\n                        <stop offset=\"100%\" stopColor=\"#ff6a63\" />\r\n                    </linearGradient>\r\n                </defs>\r\n                <circle cx={viewboxCenter} cy={viewboxCenter} r={radius} stroke=\"url(#gradient)\" strokeWidth=\"6\" style={styles.circle} />\r\n                <path id=\"arc1\" fill=\"none\" stroke=\"#50575f\" stroke-width=\"6\" d=\"M 171.44247806269212 453.2088886237956 A 200 200 0 0 0 428.5575219373079 453.2088886237956\" />\r\n                <svg x={viewboxCenter * 0.95} y={viewboxCenter * 1.4} fill=\"#323c45\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"32px\" height=\"32px\"><path d=\"M 15 3 L 15 8 L 17 8 L 17 3 Z M 7.5 6.09375 L 6.09375 7.5 L 9.625 11.0625 L 11.0625 9.625 Z M 24.5 6.09375 L 20.9375 9.625 L 22.375 11.0625 L 25.90625 7.5 Z M 16 9 C 12.144531 9 9 12.144531 9 16 C 9 19.855469 12.144531 23 16 23 C 19.855469 23 23 19.855469 23 16 C 23 12.144531 19.855469 9 16 9 Z M 16 11 C 18.773438 11 21 13.226563 21 16 C 21 18.773438 18.773438 21 16 21 C 13.226563 21 11 18.773438 11 16 C 11 13.226563 13.226563 11 16 11 Z M 3 15 L 3 17 L 8 17 L 8 15 Z M 24 15 L 24 17 L 29 17 L 29 15 Z M 9.625 20.9375 L 6.09375 24.5 L 7.5 25.90625 L 11.0625 22.375 Z M 22.375 20.9375 L 20.9375 22.375 L 24.5 25.90625 L 25.90625 24.5 Z M 15 24 L 15 29 L 17 29 L 17 24 Z\" /></svg>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nRadialDisplayView.propTypes = {\r\n    viewboxCenter: PropTypes.number, \r\n    radius: PropTypes.number,\r\n    styles: PropTypes.func\r\n};\r\n\r\nexport default RadialDisplayView;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass RadialSliderView extends Component {\r\n    render() {\r\n        const { viewboxCenter, thumbRadFrmCtr, styles, posX, posY, mouseDown, toRad } = this.props;\r\n\r\n        //instantiate an ellipse object every 5 deg to create the radial slider ticks\r\n        const tickArray = [];\r\n        for (let tickAngle = 120; tickAngle <= 420; tickAngle += 5) {\r\n            var cx = viewboxCenter + thumbRadFrmCtr * Math.cos(toRad(tickAngle));\r\n            var cy = viewboxCenter + thumbRadFrmCtr * Math.sin(toRad(tickAngle));\r\n            const tickElement = React.createElement('ellipse', {\r\n                key: ['tick-', tickAngle].join(''),\r\n                cx: cx,\r\n                cy: cy,\r\n                rx: '17',\r\n                ry: '2',\r\n                style: {\r\n                    fill: \"#c5cacd\",\r\n                    transformOrigin: `${cx}px ${cy}px`,\r\n                    transform: `rotate(${tickAngle}deg)`\r\n                }\r\n            });\r\n\r\n            tickArray.push(tickElement);\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <g>{tickArray}</g>\r\n                <ellipse cx={posX} cy={posY} rx={17} ry={7} onMouseDown={mouseDown} stroke=\"white\" strokeWidth=\"2\" style={styles.ellipse} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nRadialSliderView.propTypes = { \r\n    viewboxCenter: PropTypes.number, \r\n    thumbRadFrmCtr: PropTypes.number,\r\n    styles: PropTypes.func, \r\n    posX: PropTypes.number,\r\n    posY: PropTypes.number, \r\n    mouseDown: PropTypes.func, \r\n    toRad: PropTypes.func\r\n};\r\n\r\nexport default RadialSliderView;","import React, { Component } from 'react';\r\nimport { Machine, interpret } from 'xstate';\r\nimport RadialDisplayView from './RadialDisplayView';\r\nimport RadialSliderView from './RadialSliderView';\r\nimport { checkMode } from './Model';\r\n\r\n//xstate machine\r\nconst isHot = ({ currTemp, targetTemp }) => currTemp > targetTemp;\r\nconst isCold = ({ currTemp, targetTemp }) => currTemp < targetTemp;\r\nconst isOk = ({ currTemp, targetTemp }) => currTemp === targetTemp;\r\n\r\nconst thermostatMachine = Machine({\r\n    id: 'thermostat',\r\n    context: {\r\n        currTemp: 0,\r\n        targetTemp: 0\r\n    },\r\n    initial: 'off',\r\n    states: {\r\n        off: {\r\n            on: {\r\n                '': [\r\n                    { target: 'cooling', cond: isHot },\r\n                    { target: 'heating', cond: isCold }\r\n                ]\r\n            }\r\n        },\r\n        cooling: {\r\n            on: {\r\n                '': [\r\n                    { target: 'off', cond: isOk },\r\n                    { target: 'cooling', cond: isHot }\r\n                ]\r\n            }\r\n        },\r\n        heating: {\r\n            on: {\r\n                '': [\r\n                    { target: 'off', cond: isOk },\r\n                    { target: 'heating', cond: isCold }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nclass ViewModel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.ref = React.createRef();\r\n        this.thumbRadFrmCtr = 170;\r\n        this.viewboxWidth = 400 * 1.5;\r\n        this.viewboxCenter = this.viewboxWidth / 2;\r\n        this.radius = 200;\r\n\r\n        this.state = {\r\n            currentTemperature: 72,//range from 32-100\r\n            targetTemperature: 72,//range from 50-80\r\n            mode: 'off',\r\n            angle: 220,\r\n            posX: this.viewboxCenter + (this.thumbRadFrmCtr) * Math.cos(this.toRad(220+120)), // posX is the x coord of the slider selector\r\n            posY: this.viewboxCenter + (this.thumbRadFrmCtr) * Math.sin(this.toRad(220+120)), // posY is the y coord of the slider selector\r\n\r\n            current: thermostatMachine.initialState\r\n        };\r\n\r\n        document.addEventListener('mouseup', this.handleMouseUp);\r\n    }\r\n\r\n    //xstate methods begin\r\n    service = interpret(thermostatMachine).onTransition(current =>\r\n        this.setState({ current })\r\n    );\r\n\r\n    componentDidMount() {\r\n        this.service.start();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.service.stop();\r\n    }\r\n    //xstate methods end\r\n\r\n    getStyles() {\r\n        // Determine if the thermostat is actively working to reach the target temperature.\r\n        let dialColor = '#586369';\r\n        if (this.state.mode === 'heating') {\r\n            dialColor = '#ff6a63';\r\n        } else if (this.state.mode === 'cooling') {\r\n            dialColor = '#289beb';\r\n        }\r\n\r\n        return {\r\n            dial: {\r\n                WebkitUserSelect: 'none',\r\n                MozUserSelect: 'none',\r\n                msUserSelect: 'none',\r\n                userSelect: 'none',\r\n                display: 'flex',\r\n                marginLeft: 'auto',\r\n                marginRight: 'auto',\r\n                marginTop: '7%',\r\n                marginBottom: '7%'\r\n            },\r\n            circle: {\r\n                fill: dialColor,\r\n                WebkitTransition: 'fill 0.5s',\r\n                transition: 'fill 0.5s'\r\n            },\r\n            ellipse: {\r\n                fill: \"yellow\",\r\n                WebkitTransition: 'fill 0.5s',\r\n                transition: 'fill 0.5s',\r\n                transformOrigin: `${this.state.posX}px ${this.state.posY}px`,\r\n                transform: `rotate(${this.state.angle + 120}deg)`\r\n            },\r\n            target: {\r\n                fill: 'white',\r\n                textAnchor: 'middle',\r\n                fontFamily: 'Helvetica, sans-serif',\r\n                alignmentBaseline: 'central',\r\n                fontSize: '120px',\r\n                fontWeight: 'bold',\r\n                visibility: this.props.away ? 'hidden' : 'visible'\r\n            },\r\n            current: {\r\n                fill: 'white',\r\n                textAnchor: 'middle',\r\n                fontFamily: 'Helvetica, sans-serif',\r\n                alignmentBaseline: 'central',\r\n                fontSize: '40px',\r\n                fontWeight: 'bold'\r\n            }\r\n        };\r\n    }\r\n\r\n    //utility methods begin\r\n    restrictToRange(val, min, max) {\r\n        if (val < min) return min;\r\n        if (val > max) return max;\r\n        return Math.round(val);\r\n    }\r\n\r\n    toDeg(rad) {\r\n        return rad * 180 / Math.PI\r\n    }\r\n\r\n    toRad(deg) {\r\n        return deg * Math.PI / 180\r\n    }\r\n    //utility methods end\r\n\r\n    //event handlers methods begin\r\n    handleOnChange = (e) => {\r\n        this.setState({\r\n            currentTemperature: e.target.value,\r\n        });\r\n\r\n        this.handleModechange();\r\n    }\r\n\r\n    handleMouseDown = () => {\r\n        document.addEventListener('mousemove', this.handleMouseMove)\r\n    }\r\n\r\n    handleMouseMove = (e) => {\r\n        this.handleUpdateTargetTemp(e);\r\n        this.handleModechange();\r\n    }\r\n\r\n    handleMouseUp = () => {\r\n        document.removeEventListener('mousemove', this.handleMouseMove)\r\n    }\r\n\r\n    handleUpdateTargetTemp = (e) => {\r\n        //calculate the angle made between the target to center of circle and the horizontal axis\r\n        const offset = (2 * Math.PI / 3); //120 deg in rad\r\n        const minDeg = 0;\r\n        const maxDeg = 300\r\n        const rect = this.ref.current.getBoundingClientRect();\r\n        this.center = rect.width / 2;\r\n        let angle = this.restrictToRange(this.toDeg((Math.atan2(e.clientY - rect.top - this.center, e.clientX - rect.left - this.center) - offset + 2 * Math.PI) % (2 * Math.PI)), minDeg, maxDeg);\r\n        \r\n        //convert the angle from 0 - 300 deg to values of 50 - 80\r\n        let targetTemperature = angle / 10 + 50;\r\n\r\n        this.setState({\r\n            angle: angle,\r\n            targetTemperature: targetTemperature,\r\n            posX: this.viewboxCenter + (this.thumbRadFrmCtr) * Math.cos(this.toRad(angle) + offset),\r\n            posY: this.viewboxCenter + (this.thumbRadFrmCtr) * Math.sin(this.toRad(angle) + offset),\r\n        });\r\n    }\r\n\r\n    handleModechange = () => {\r\n        const mode = checkMode(this.state.currentTemperature, this.state.targetTemperature, this.state.mode);\r\n        this.setState({\r\n            mode: mode,\r\n        });\r\n    }\r\n    //event handlers methods end\r\n\r\n    render() {\r\n        const styles = this.getStyles();\r\n\r\n        const { current } = this.state;\r\n        const { send } = this.service;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <svg ref={this.ref} width={'30%'} height={'30%'} style={styles.dial} viewBox={`0 0 ${this.viewboxWidth} ${this.viewboxWidth}`}>\r\n                    <RadialDisplayView\r\n                        viewboxCenter={this.viewboxCenter}\r\n                        radius={this.radius}\r\n                        styles={styles} />\r\n\r\n                    <RadialSliderView\r\n                        viewboxCenter={this.viewboxCenter}\r\n                        thumbRadFrmCtr={this.thumbRadFrmCtr}\r\n                        styles={styles}\r\n                        posX={this.state.posX}\r\n                        posY={this.state.posY}\r\n                        mouseDown={this.handleMouseDown}\r\n                        toRad={this.toRad}\r\n                    />\r\n\r\n                    <text x={this.viewboxCenter} y={this.viewboxCenter * 1.1} style={styles.target}>{Math.round(this.state.targetTemperature)}</text>\r\n\r\n                    <text x={this.viewboxCenter} y={this.viewboxCenter * 1.3} style={styles.current}>Current: {Math.round(this.state.currentTemperature)}</text>\r\n                </svg>\r\n\r\n                <label id=\"test_UI\">\r\n                    <span>Set Current Temperature </span>\r\n                    <input type='range' min={32} max={100} value={Math.round(this.state.currentTemperature)} id='input_target_temperature' onChange={this.handleOnChange} />\r\n                </label>\r\n\r\n                <a href=\"https://icons8.com/icon/16270/sun\">Sun icon by Icons8</a>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewModel;","export const checkMode = (T_c, T_t, currentMode) => {\r\n    const dT = 2;\r\n    const dT_cool = 1.5;\r\n    const dT_heat = 1;\r\n\r\n    if (T_c > T_t + dT + dT_cool) return \"cooling\";\r\n    else if (T_c < T_t - dT - dT_heat) return \"heating\";\r\n    else if (T_t - (dT - dT_heat) < T_c && T_c < T_t + (dT - dT_cool)) return \"off\";\r\n    else return currentMode;\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport ViewModel from './ViewModel';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <ViewModel/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}